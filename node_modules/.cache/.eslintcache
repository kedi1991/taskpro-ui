[{"/workspace/taskpro_api/taskpro_ui/src/index.js":"1","/workspace/taskpro_api/taskpro_ui/src/App.js":"2","/workspace/taskpro_api/taskpro_ui/src/reportWebVitals.js":"3","/workspace/taskpro_api/taskpro_ui/src/contexts/ActiveUserContext.js":"4","/workspace/taskpro_api/taskpro_ui/src/api/axiosDefaults.js":"5","/workspace/taskpro_api/taskpro_ui/src/components/TopNavBar.js":"6","/workspace/taskpro_api/taskpro_ui/src/pages/auth/RegisterForm.js":"7","/workspace/taskpro_api/taskpro_ui/src/pages/tasks/TaskForm.js":"8","/workspace/taskpro_api/taskpro_ui/src/pages/tasks/Tasks.js":"9","/workspace/taskpro_api/taskpro_ui/src/pages/auth/SignInForm.js":"10","/workspace/taskpro_api/taskpro_ui/src/pages/tasks/TaskView.js":"11","/workspace/taskpro_api/taskpro_ui/src/pages/projects/ProjectForm.js":"12","/workspace/taskpro_api/taskpro_ui/src/pages/projects/Projects.js":"13","/workspace/taskpro_api/taskpro_ui/src/pages/projects/ProjectView.js":"14","/workspace/taskpro_api/taskpro_ui/src/pages/projects/Project.js":"15","/workspace/taskpro_api/taskpro_ui/src/pages/tasks/Task.js":"16","/workspace/taskpro_api/taskpro_ui/src/hooks/useRegisteredUsers.js":"17","/workspace/taskpro_api/taskpro_ui/src/hooks/useProjects.js":"18","/workspace/taskpro_api/taskpro_ui/src/pages/tasks/TasksPage.js":"19"},{"size":716,"mtime":1709336397000,"results":"20","hashOfConfig":"21"},{"size":2664,"mtime":1709474681830,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1709336397000,"results":"23","hashOfConfig":"21"},{"size":2256,"mtime":1709336397000,"results":"24","hashOfConfig":"21"},{"size":325,"mtime":1709394491000,"results":"25","hashOfConfig":"21"},{"size":2557,"mtime":1709336397000,"results":"26","hashOfConfig":"21"},{"size":4105,"mtime":1709336397000,"results":"27","hashOfConfig":"21"},{"size":6767,"mtime":1709416801000,"results":"28","hashOfConfig":"21"},{"size":609,"mtime":1709336397000,"results":"29","hashOfConfig":"21"},{"size":3814,"mtime":1709407874000,"results":"30","hashOfConfig":"21"},{"size":1044,"mtime":1709483583830,"results":"31","hashOfConfig":"21"},{"size":2452,"mtime":1709336397000,"results":"32","hashOfConfig":"21"},{"size":624,"mtime":1709336397000,"results":"33","hashOfConfig":"21"},{"size":1241,"mtime":1709336397000,"results":"34","hashOfConfig":"21"},{"size":629,"mtime":1709336397000,"results":"35","hashOfConfig":"21"},{"size":966,"mtime":1709483953982,"results":"36","hashOfConfig":"21"},{"size":733,"mtime":1709408521000,"results":"37","hashOfConfig":"21"},{"size":517,"mtime":1709411668000,"results":"38","hashOfConfig":"21"},{"size":1690,"mtime":1709487326243,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"91co8e",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/workspace/taskpro_api/taskpro_ui/src/index.js",[],["87","88"],"/workspace/taskpro_api/taskpro_ui/src/App.js",["89"],"/workspace/taskpro_api/taskpro_ui/src/reportWebVitals.js",[],"/workspace/taskpro_api/taskpro_ui/src/contexts/ActiveUserContext.js",[],"/workspace/taskpro_api/taskpro_ui/src/api/axiosDefaults.js",[],"/workspace/taskpro_api/taskpro_ui/src/components/TopNavBar.js",["90"],"import { Container, Nav, NavLink, Navbar } from 'react-bootstrap';\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport styles from \"../styles/TopNavBar.module.css\";\nimport axios from 'axios';\nimport { useActiveUser, useSetActiveUser } from '../contexts/ActiveUserContext';\n\nconst TopNavBar = () => {\n\n  const activeUser = useActiveUser()\n  const setActiveUser = useSetActiveUser()\n\n  //handle signout\n  const handleSignOut = async () => {\n    try {\n      await axios.post(\"dj-rest-auth/logout/\");\n      setActiveUser(null);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // Icons to display when logged in\n\n  const iconsLoggedIn = <>\n    <NavDropdown title=\"Tasks\" id=\"basic-nav-dropdown\">\n      <NavDropdown.Item href=\"/tasks\">View tasks</NavDropdown.Item>\n      <NavDropdown.Item href=\"/task/create\">\n        Add task\n      </NavDropdown.Item>\n      <NavDropdown.Item href=\"/task/edit/:id\">Edit task</NavDropdown.Item>\n      <NavDropdown.Divider />\n      <NavDropdown.Item href=\"/task/delete/:id\">\n        Delete task\n      </NavDropdown.Item>\n    </NavDropdown>\n\n    <NavDropdown title=\"Projects\" id=\"basic-nav-dropdown\">\n      <NavDropdown.Item href=\"/projects\">View projects</NavDropdown.Item>\n      <NavDropdown.Item href=\"/project/add\">\n        Add project\n      </NavDropdown.Item>\n      <NavDropdown.Item href=\"/project/edit/:id\">Edit project</NavDropdown.Item>\n      <NavDropdown.Divider />\n      <NavDropdown.Item href=\"/project/delete/:id\">\n        Delete project\n      </NavDropdown.Item>\n    </NavDropdown>\n    <Navbar.Text>\n      Signed in as: \n    </Navbar.Text>\n    <NavDropdown title= {activeUser?.username} id=\"account-dropdown\">\n      <NavDropdown.Item href=\"/\" onClick={handleSignOut}>Sign out</NavDropdown.Item>\n      \n    </NavDropdown>\n    \n  </>\n\n  //Icons to display when logged out\n\n  const iconsLoggedOut = <>\n    <Navbar.Text>\n      <a href=\"/signin\">Sign In</a>\n    </Navbar.Text>\n    <Navbar.Text>\n      <a href=\"/register\">Sign Up</a>\n    </Navbar.Text>\n\n  </>\n\n  return (\n    <>\n      <Navbar className={styles.TopNavBar} fixed='top'>\n\n        <Container>\n          <Nav className=\"me-auto\">\n            <Navbar.Brand>\n              TASK PRO 1\n            </Navbar.Brand>\n          </Nav>\n          <Navbar.Toggle />\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Nav className='mr-auto'>\n              {activeUser ? iconsLoggedIn : iconsLoggedOut}\n            </Nav>\n\n          </Navbar.Collapse>\n        </Container>\n\n\n      </Navbar>\n    </>\n  );\n}\n\nexport default TopNavBar;","/workspace/taskpro_api/taskpro_ui/src/pages/auth/RegisterForm.js",[],"/workspace/taskpro_api/taskpro_ui/src/pages/tasks/TaskForm.js",["91","92","93","94","95","96","97","98"],"import React, { useState } from \"react\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\n\nimport Upload from \"../../assets/upload.png\";\nimport useRegisteredUsers from \"../../hooks/useRegisteredUsers\";\n\nimport styles from \"../../styles/TaskForm.module.css\";\nimport appStyles from \"../../App.module.css\";\nimport btnStyles from \"../../styles/Button.module.css\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\nimport useProjects from \"../../hooks/useProjects\";\n\nfunction TaskForm() {\n\n    const [errors, setErrors] = useState({});\n    const history = useHistory();\n    \n    // Use the custom hook to get the selected value\n    const {data, loading} = useRegisteredUsers();\n\n    const { projects } = useProjects()\n    const [selectedProject, setSelectedProject] = useState(\"\")\n\n    const [selectedUser, setSelectedUser] = useState(''); // State to hold the selected user ID\n\n    // Event handler to handle select change\n    const handleSelectChange = (event) => {\n        setSelectedUser(event.target.value); // Update the selected user ID in state\n    };\n\n    const [selectedStatus, setSelectedStatus] = useState(''); // State to hold the selected user ID\n\n    // Event handler to handle select change\n    const handleSelectStatus = (event) => {\n        setSelectedStatus(event.target.value); // Update the selected user ID in state\n    };\n\n    // Event handler to handle select change\n    const handleProjectSelectChange = (event) => {\n        setSelectedProject(event.target.value); // Update the selected user ID in state\n    };\n\n\n    const [taskData, setTaskData] = useState({\n        task_name: \"\",\n        description: \"\",\n        assignees: \"\",\n        project: \"\",\n        status: \"\",\n        attachment: \"\",\n    });\n    const { task_name, description, assignees, project, status, attachment } = taskData;\n\n    const handleChange = (event) => {\n        setTaskData({\n            ...taskData,\n            [event.target.name]: event.target.value,\n        });\n    };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const formData = new FormData();\n\n        formData.append(\"task_name\", task_name);\n        formData.append(\"description\", description);\n        formData.append(\"assignees\", selectedUser);\n        formData.append(\"project\", selectedProject);\n        formData.append(\"description\", description);\n        formData.append(\"status\", selectedStatus);\n        formData.append(\"attachment\", attachment);\n\n        try {\n\n            const { data } = await axios.post(\"/tasks/\", formData);\n            history.push(`/tasks/${data.id}`);\n\n        } catch (err) {\n            console.log(err);\n            if (err.response?.status !== 401) {\n                setErrors(err.response?.data);\n            }\n        }\n    };\n\n    const otherFields = (\n        <div className=\"text-center\">\n\n            <Form.Group controlId=\"task_name\">\n                <Form.Label>Task name</Form.Label>\n                <Form.Control type=\"text\" name=\"task_name\" value={task_name} onChange={handleChange} />\n            </Form.Group>\n            <Form.Group controlId=\"description\">\n                <Form.Label>Description</Form.Label>\n                <Form.Control type=\"text\" name=\"description\" value={description} onChange={handleChange} />\n            </Form.Group>\n            <Form.Group controlId=\"assignees\">\n                <Form.Label>Assignees</Form.Label>\n                <Form.Control as=\"select\" value={selectedUser} name=\"assignees\" onChange={(e) => setSelectedUser(e.target.value)}>\n                    <option value=\"\">Select...</option>\n                        {data.map(user => (\n                    <option key={user.id} value={user.id}>{user.owner}</option>\n                ))}\n                </Form.Control>\n            </Form.Group>\n            <Form.Group controlId=\"project\">\n                <Form.Label>Project</Form.Label>\n                <Form.Control as=\"select\" value={selectedProject} name=\"project\" onChange={(e) => setSelectedProject(e.target.value)}>\n                    <option value=\"\">Select...</option>\n                        {projects.map(project => (\n                    <option key={project.id} value={project.id}>{project.project_name}</option>\n                ))}\n                </Form.Control>\n            </Form.Group>\n            <Form.Group controlId=\"status\">\n                <Form.Label>Status</Form.Label>\n                <Form.Control as=\"select\" value={selectedStatus} name=\"status\" onChange={(e) => setSelectedStatus(e.target.value)}>\n                    <option key={project.id} value='0'>Pending</option>\n                    <option key={project.id} value='1'>Executing</option>\n                    <option key={project.id} value='2'>Completed</option>\n                    <option key={project.id} value='3'>Blocked</option>\n                </Form.Control>\n            </Form.Group>\n            <Form.Group controlId=\"attachment\">\n                <Form.Label>attachment</Form.Label>\n                <Form.Control type=\"text\" name=\"attachment\" value={attachment} onChange={handleChange} />\n            </Form.Group>\n            <br></br>\n            <Button\n                className={`${btnStyles.Button} ${btnStyles.Blue}`}\n                onClick={() => { }}\n            >\n                cancel\n            </Button>\n            <Button className={`${btnStyles.Button} ${btnStyles.Blue}`} type=\"submit\">\n                create\n            </Button>\n        </div>\n    );\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Row>\n                <Col className=\"py-2 p-0 p-md-2\" md={7} lg={8}>\n                    <Container\n                        className={`${appStyles.Content} ${styles.Container} d-flex flex-column justify-content-center`}\n                    >\n                        <Form.Group className=\"text-center\">\n\n                            <Form.Label\n                                className=\"d-flex justify-content-center\"\n                                htmlFor=\"image-upload\"\n                            >\n                                Upload your file attachment\n                            </Form.Label>\n\n                        </Form.Group>\n                        <div className=\"d-md-none\">{otherFields}</div>\n                    </Container>\n                </Col>\n                <Col md={5} lg={4} className=\"d-none d-md-block p-0 p-md-2\">\n                    <Container className={appStyles.Content}>{otherFields}</Container>\n                </Col>\n            </Row>\n        </Form>\n    );\n}\n\nexport default TaskForm;","/workspace/taskpro_api/taskpro_ui/src/pages/tasks/Tasks.js",["99","100","101","102"],"import React from \"react\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"react-bootstrap/Container\";\n\nimport appStyles from \"../../App.module.css\";\nimport styles from \"../../styles/Tasks.module.css\";\n\nfunction Tasks() {\n  \n  return (\n    <Row className=\"h-100\">\n      <Col className=\"py-2 p-0 p-lg-2\" lg={8}>\n        <p>Tasks fpr mobile here</p>\n      \n      </Col>\n      <Col md={4} className=\"d-none d-lg-block p-0 p-lg-2\">\n        <p>Tasks for desktop</p>\n      </Col>\n    </Row>\n  );\n}\n\nexport default Tasks;","/workspace/taskpro_api/taskpro_ui/src/pages/auth/SignInForm.js",["103"],"import React, { useContext, useState } from \"react\";\nimport axios from \"axios\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Image from \"react-bootstrap/Image\";\nimport Container from \"react-bootstrap/Container\";\n\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport styles from \"../../styles/AuthForms.module.css\";\nimport btnStyles from \"../../styles/Button.module.css\";\nimport appStyles from \"../../App.module.css\";\nimport { useSetActiveUser } from \"../../contexts/ActiveUserContext\";\n\nfunction SignInForm() {\n\n  const setActiveUser = useSetActiveUser()\n\n  const [signInData, setSignInData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n  const { username, password } = signInData;\n\n  const [errors, setErrors] = useState({});\n\n  const history = useHistory();\n\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try { \n      const {data} = await axios.post(\"/dj-rest-auth/login/\", signInData);\n      //Set current user data to be accessed in the Nav bar to show the logged in user\n      setActiveUser(data.user)\n      history.push(\"/\");\n    } catch (err) {\n      setErrors(err.response?.data);\n    }\n  };\n\n  const handleChange = (event) => {\n    setSignInData({\n      ...signInData,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  return (\n    <Row className={styles.Row}>\n      <Col className=\"my-auto p-0 p-md-2\" md={6}>\n        <Container className={`${appStyles.Content} p-4 `}>\n          <h1 className={styles.Header}>sign in</h1>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"username\">\n              <Form.Label className=\"d-none\">Username</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Username\"\n                name=\"username\"\n                className={styles.Input}\n                value={username}\n                onChange={handleChange}\n              />\n            </Form.Group>\n            {errors.username?.map((message, idx) => (\n              <Alert key={idx} variant=\"warning\">\n                {message}\n              </Alert>\n            ))}\n\n            <Form.Group controlId=\"password\">\n              <Form.Label className=\"d-none\">Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Password\"\n                name=\"password\"\n                className={styles.Input}\n                value={password}\n                onChange={handleChange}\n              />\n            </Form.Group>\n            {errors.password?.map((message, idx) => (\n              <Alert key={idx} variant=\"warning\">\n                {message}\n              </Alert>\n            ))}\n            <Button\n              className={`${btnStyles.Button} ${btnStyles.Wide} ${btnStyles.Bright}`}\n              type=\"submit\"\n            >\n              Sign in\n            </Button>\n            {errors.non_field_errors?.map((message, idx) => (\n              <Alert key={idx} variant=\"warning\" className=\"mt-3\">\n                {message}\n              </Alert>\n            ))}\n          </Form>\n        </Container>\n        <Container className={`mt-3 ${appStyles.Content}`}>\n          <Link className={styles.Link} to=\"/register\">\n            Don't have an account? <span>Sign up now!</span>\n          </Link>\n        </Container>\n      </Col>\n      <Col\n        md={6}\n        className={`my-auto d-none d-md-block p-2 ${styles.SignInCol}`}\n      >\n        <Image\n          className={`${appStyles.FillerImage}`}\n          src={\"https://codeinstitute.s3.amazonaws.com/AdvancedReact/hero.jpg\"}\n        />\n      </Col>\n    </Row>\n  );\n}\n\nexport default SignInForm;","/workspace/taskpro_api/taskpro_ui/src/pages/tasks/TaskView.js",["104","105"],"/workspace/taskpro_api/taskpro_ui/src/pages/projects/ProjectForm.js",["106","107","108"],"import React, { useState } from \"react\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\n\nimport Upload from \"../../assets/upload.png\";\n\nimport styles from \"../../styles/TaskForm.module.css\";\nimport appStyles from \"../../App.module.css\";\nimport btnStyles from \"../../styles/Button.module.css\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\n\nfunction ProjectForm() {\n\n    const [errors, setErrors] = useState({});\n    const history = useHistory();\n\n    const [projectData, setProjectData] = useState({\n        project_name: \"\",\n\n    });\n    const { project_name } = projectData;\n\n    const handleChange = (event) => {\n        setProjectData({\n            ...projectData,\n            [event.target.name]: event.target.value,\n        });\n    };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const formData = new FormData();\n\n        formData.append(\"project_name\", project_name);\n\n        try {\n\n            const { data } = await axios.post(\"/projects/\", formData);\n            history.push(`/projects/${data.id}`);\n\n        } catch (err) {\n            console.log(err);\n            if (err.response?.status !== 401) {\n                setErrors(err.response?.data);\n            }\n        }\n    };\n\n    const otherFields = (\n        <div className=\"text-center\">\n\n            <Form.Group controlId=\"project_name\">\n                <Form.Label>Project name</Form.Label>\n                <Form.Control type=\"text\" name=\"project_name\" value={project_name} onChange={handleChange} />\n            </Form.Group>\n\n            <br></br>\n            <Button\n                className={`${btnStyles.Button} ${btnStyles.Blue}`}\n                onClick={() => { }}\n            >\n                cancel\n            </Button>\n            <Button className={`${btnStyles.Button} ${btnStyles.Blue}`} type=\"submit\">\n                create\n            </Button>\n        </div>\n    );\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Row>\n\n                <Col md={5} lg={4} className=\"d-none d-md-block p-0 p-md-2\">\n                    <Container className={appStyles.Content}>{otherFields}</Container>\n                </Col>\n            </Row>\n        </Form>\n    );\n}\n\nexport default ProjectForm;","/workspace/taskpro_api/taskpro_ui/src/pages/projects/Projects.js",["109","110","111","112"],"import React from \"react\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"react-bootstrap/Container\";\n\nimport appStyles from \"../../App.module.css\";\nimport styles from \"../../styles/Projects.module.css\";\n\nfunction Projects() {\n  \n  return (\n    <Row className=\"h-100\">\n      <Col className=\"py-2 p-0 p-lg-2\" lg={8}>\n        <p>Projects fpr mobile here</p>\n      \n      </Col>\n      <Col md={4} className=\"d-none d-lg-block p-0 p-lg-2\">\n        <p>Projects for desktop</p>\n      </Col>\n    </Row>\n  );\n}\n\nexport default Projects;","/workspace/taskpro_api/taskpro_ui/src/pages/projects/ProjectView.js",[],"/workspace/taskpro_api/taskpro_ui/src/pages/projects/Project.js",["113","114","115","116","117","118","119","120","121"],"import React from \"react\";\nimport styles from \"../../styles/TaskForm.module.css\";\nimport { Card, Media, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nconst Project = (props) => {\n    const {\n        id,\n        owner,\n        created_at,\n        updated_at,\n        project_name,\n        is_owner,\n    } = props;\n\n    return (\n        <Card className={styles.Project}>\n            <Card.Body>\n                {project_name && <Card.Title className=\"text-center\">{project_name}</Card.Title>}\n                \n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default Project;","/workspace/taskpro_api/taskpro_ui/src/pages/tasks/Task.js",["122","123","124","125","126","127","128","129","130","131"],"/workspace/taskpro_api/taskpro_ui/src/hooks/useRegisteredUsers.js",["132"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useRegisteredUsers = () => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true); // Add loading state\n\n  useEffect(() => {\n    axios.get('/profiles/')\n      .then(response => {\n        setData(response.data);\n        setLoading(false); // Set loading to false after data is fetched\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n        setLoading(false); // Set loading to false in case of error\n      });\n  }, []); // ensures effect runs only once after initial render\n\n  return { data, loading }; // Return data and loading state\n}\n\nexport default useRegisteredUsers;\n","/workspace/taskpro_api/taskpro_ui/src/hooks/useProjects.js",[],"/workspace/taskpro_api/taskpro_ui/src/pages/tasks/TasksPage.js",["133","134"],{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":13,"column":8,"nodeType":"141","messageId":"142","endLine":13,"endColumn":13},{"ruleId":"139","severity":1,"message":"143","line":1,"column":26,"nodeType":"141","messageId":"142","endLine":1,"endColumn":33},{"ruleId":"139","severity":1,"message":"144","line":9,"column":8,"nodeType":"141","messageId":"142","endLine":9,"endColumn":14},{"ruleId":"139","severity":1,"message":"145","line":21,"column":12,"nodeType":"141","messageId":"142","endLine":21,"endColumn":18},{"ruleId":"139","severity":1,"message":"146","line":25,"column":18,"nodeType":"141","messageId":"142","endLine":25,"endColumn":25},{"ruleId":"139","severity":1,"message":"147","line":33,"column":11,"nodeType":"141","messageId":"142","endLine":33,"endColumn":29},{"ruleId":"139","severity":1,"message":"148","line":40,"column":11,"nodeType":"141","messageId":"142","endLine":40,"endColumn":29},{"ruleId":"139","severity":1,"message":"149","line":45,"column":11,"nodeType":"141","messageId":"142","endLine":45,"endColumn":36},{"ruleId":"139","severity":1,"message":"150","line":58,"column":37,"nodeType":"141","messageId":"142","endLine":58,"endColumn":46},{"ruleId":"139","severity":1,"message":"151","line":58,"column":57,"nodeType":"141","messageId":"142","endLine":58,"endColumn":63},{"ruleId":"139","severity":1,"message":"152","line":3,"column":8,"nodeType":"141","messageId":"142","endLine":3,"endColumn":12},{"ruleId":"139","severity":1,"message":"153","line":6,"column":8,"nodeType":"141","messageId":"142","endLine":6,"endColumn":17},{"ruleId":"139","severity":1,"message":"154","line":8,"column":8,"nodeType":"141","messageId":"142","endLine":8,"endColumn":17},{"ruleId":"139","severity":1,"message":"155","line":9,"column":8,"nodeType":"141","messageId":"142","endLine":9,"endColumn":14},{"ruleId":"139","severity":1,"message":"156","line":1,"column":17,"nodeType":"141","messageId":"142","endLine":1,"endColumn":27},{"ruleId":"139","severity":1,"message":"153","line":5,"column":8,"nodeType":"141","messageId":"142","endLine":5,"endColumn":17},{"ruleId":"139","severity":1,"message":"154","line":7,"column":8,"nodeType":"141","messageId":"142","endLine":7,"endColumn":17},{"ruleId":"139","severity":1,"message":"144","line":9,"column":8,"nodeType":"141","messageId":"142","endLine":9,"endColumn":14},{"ruleId":"139","severity":1,"message":"155","line":11,"column":8,"nodeType":"141","messageId":"142","endLine":11,"endColumn":14},{"ruleId":"139","severity":1,"message":"145","line":19,"column":12,"nodeType":"141","messageId":"142","endLine":19,"endColumn":18},{"ruleId":"139","severity":1,"message":"152","line":3,"column":8,"nodeType":"141","messageId":"142","endLine":3,"endColumn":12},{"ruleId":"139","severity":1,"message":"153","line":6,"column":8,"nodeType":"141","messageId":"142","endLine":6,"endColumn":17},{"ruleId":"139","severity":1,"message":"154","line":8,"column":8,"nodeType":"141","messageId":"142","endLine":8,"endColumn":17},{"ruleId":"139","severity":1,"message":"155","line":9,"column":8,"nodeType":"141","messageId":"142","endLine":9,"endColumn":14},{"ruleId":"139","severity":1,"message":"157","line":3,"column":16,"nodeType":"141","messageId":"142","endLine":3,"endColumn":21},{"ruleId":"139","severity":1,"message":"158","line":3,"column":23,"nodeType":"141","messageId":"142","endLine":3,"endColumn":37},{"ruleId":"139","severity":1,"message":"159","line":3,"column":39,"nodeType":"141","messageId":"142","endLine":3,"endColumn":46},{"ruleId":"139","severity":1,"message":"160","line":4,"column":10,"nodeType":"141","messageId":"142","endLine":4,"endColumn":14},{"ruleId":"139","severity":1,"message":"161","line":8,"column":9,"nodeType":"141","messageId":"142","endLine":8,"endColumn":11},{"ruleId":"139","severity":1,"message":"162","line":9,"column":9,"nodeType":"141","messageId":"142","endLine":9,"endColumn":14},{"ruleId":"139","severity":1,"message":"163","line":10,"column":9,"nodeType":"141","messageId":"142","endLine":10,"endColumn":19},{"ruleId":"139","severity":1,"message":"164","line":11,"column":9,"nodeType":"141","messageId":"142","endLine":11,"endColumn":19},{"ruleId":"139","severity":1,"message":"165","line":13,"column":9,"nodeType":"141","messageId":"142","endLine":13,"endColumn":17},{"ruleId":"139","severity":1,"message":"157","line":3,"column":16,"nodeType":"141","messageId":"142","endLine":3,"endColumn":21},{"ruleId":"139","severity":1,"message":"158","line":3,"column":23,"nodeType":"141","messageId":"142","endLine":3,"endColumn":37},{"ruleId":"139","severity":1,"message":"159","line":3,"column":39,"nodeType":"141","messageId":"142","endLine":3,"endColumn":46},{"ruleId":"139","severity":1,"message":"160","line":4,"column":10,"nodeType":"141","messageId":"142","endLine":4,"endColumn":14},{"ruleId":"139","severity":1,"message":"166","line":5,"column":8,"nodeType":"141","messageId":"142","endLine":5,"endColumn":16},{"ruleId":"139","severity":1,"message":"161","line":9,"column":9,"nodeType":"141","messageId":"142","endLine":9,"endColumn":11},{"ruleId":"139","severity":1,"message":"162","line":10,"column":9,"nodeType":"141","messageId":"142","endLine":10,"endColumn":14},{"ruleId":"139","severity":1,"message":"163","line":11,"column":9,"nodeType":"141","messageId":"142","endLine":11,"endColumn":19},{"ruleId":"139","severity":1,"message":"164","line":12,"column":9,"nodeType":"141","messageId":"142","endLine":12,"endColumn":19},{"ruleId":"139","severity":1,"message":"165","line":19,"column":9,"nodeType":"141","messageId":"142","endLine":19,"endColumn":17},{"ruleId":"139","severity":1,"message":"167","line":1,"column":8,"nodeType":"141","messageId":"142","endLine":1,"endColumn":13},{"ruleId":"139","severity":1,"message":"168","line":3,"column":8,"nodeType":"141","messageId":"142","endLine":3,"endColumn":12},{"ruleId":"139","severity":1,"message":"166","line":4,"column":8,"nodeType":"141","messageId":"142","endLine":4,"endColumn":16},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"no-unused-vars","'Tasks' is defined but never used.","Identifier","unusedVar","'NavLink' is defined but never used.","'Upload' is defined but never used.","'errors' is assigned a value but never used.","'loading' is assigned a value but never used.","'handleSelectChange' is assigned a value but never used.","'handleSelectStatus' is assigned a value but never used.","'handleProjectSelectChange' is assigned a value but never used.","'assignees' is assigned a value but never used.","'status' is assigned a value but never used.","'Form' is defined but never used.","'Container' is defined but never used.","'appStyles' is defined but never used.","'styles' is defined but never used.","'useContext' is defined but never used.","'Media' is defined but never used.","'OverlayTrigger' is defined but never used.","'Tooltip' is defined but never used.","'Link' is defined but never used.","'id' is assigned a value but never used.","'owner' is assigned a value but never used.","'created_at' is assigned a value but never used.","'updated_at' is assigned a value but never used.","'is_owner' is assigned a value but never used.","'TaskView' is defined but never used.","'React' is defined but never used.","'Task' is defined but never used.","no-global-assign","no-unsafe-negation"]