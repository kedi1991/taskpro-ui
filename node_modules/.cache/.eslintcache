[{"/workspace/taskpro_api/taskpro_ui/src/index.js":"1","/workspace/taskpro_api/taskpro_ui/src/App.js":"2","/workspace/taskpro_api/taskpro_ui/src/reportWebVitals.js":"3","/workspace/taskpro_api/taskpro_ui/src/contexts/ActiveUserContext.js":"4","/workspace/taskpro_api/taskpro_ui/src/api/axiosDefaults.js":"5","/workspace/taskpro_api/taskpro_ui/src/components/TopNavBar.js":"6","/workspace/taskpro_api/taskpro_ui/src/pages/auth/RegisterForm.js":"7","/workspace/taskpro_api/taskpro_ui/src/pages/tasks/TaskForm.js":"8","/workspace/taskpro_api/taskpro_ui/src/pages/tasks/Tasks.js":"9","/workspace/taskpro_api/taskpro_ui/src/pages/auth/SignInForm.js":"10","/workspace/taskpro_api/taskpro_ui/src/pages/tasks/TaskView.js":"11","/workspace/taskpro_api/taskpro_ui/src/pages/projects/ProjectForm.js":"12","/workspace/taskpro_api/taskpro_ui/src/pages/projects/Projects.js":"13","/workspace/taskpro_api/taskpro_ui/src/pages/projects/ProjectView.js":"14","/workspace/taskpro_api/taskpro_ui/src/pages/projects/Project.js":"15","/workspace/taskpro_api/taskpro_ui/src/pages/tasks/Task.js":"16","/workspace/taskpro_api/taskpro_ui/src/hooks/useRegisteredUsers.js":"17","/workspace/taskpro_api/taskpro_ui/src/hooks/useProjects.js":"18","/workspace/taskpro_api/taskpro_ui/src/pages/tasks/TasksPage.js":"19","/workspace/taskpro_api/taskpro_ui/src/pages/projects/ProjectsPage.js":"20"},{"size":716,"mtime":1709336397000,"results":"21","hashOfConfig":"22"},{"size":2730,"mtime":1709496316767,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1709336397000,"results":"24","hashOfConfig":"22"},{"size":2256,"mtime":1709336397000,"results":"25","hashOfConfig":"22"},{"size":281,"mtime":1709503199805,"results":"26","hashOfConfig":"22"},{"size":2225,"mtime":1709495298924,"results":"27","hashOfConfig":"22"},{"size":4105,"mtime":1709336397000,"results":"28","hashOfConfig":"22"},{"size":6296,"mtime":1709499483080,"results":"29","hashOfConfig":"22"},{"size":609,"mtime":1709336397000,"results":"30","hashOfConfig":"22"},{"size":3814,"mtime":1709407874000,"results":"31","hashOfConfig":"22"},{"size":1044,"mtime":1709483583830,"results":"32","hashOfConfig":"22"},{"size":3072,"mtime":1709499453316,"results":"33","hashOfConfig":"22"},{"size":624,"mtime":1709336397000,"results":"34","hashOfConfig":"22"},{"size":1241,"mtime":1709336397000,"results":"35","hashOfConfig":"22"},{"size":629,"mtime":1709336397000,"results":"36","hashOfConfig":"22"},{"size":966,"mtime":1709483953982,"results":"37","hashOfConfig":"22"},{"size":733,"mtime":1709408521000,"results":"38","hashOfConfig":"22"},{"size":517,"mtime":1709411668000,"results":"39","hashOfConfig":"22"},{"size":4292,"mtime":1709495107024,"results":"40","hashOfConfig":"22"},{"size":3902,"mtime":1709498145113,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"91co8e",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/workspace/taskpro_api/taskpro_ui/src/index.js",[],["92","93"],"/workspace/taskpro_api/taskpro_ui/src/App.js",["94","95"],"/workspace/taskpro_api/taskpro_ui/src/reportWebVitals.js",[],"/workspace/taskpro_api/taskpro_ui/src/contexts/ActiveUserContext.js",[],"/workspace/taskpro_api/taskpro_ui/src/api/axiosDefaults.js",[],"/workspace/taskpro_api/taskpro_ui/src/components/TopNavBar.js",["96"],"import { Container, Nav, NavLink, Navbar } from 'react-bootstrap';\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport styles from \"../styles/TopNavBar.module.css\";\nimport axios from 'axios';\nimport { useActiveUser, useSetActiveUser } from '../contexts/ActiveUserContext';\n\nconst TopNavBar = () => {\n\n  const activeUser = useActiveUser()\n  const setActiveUser = useSetActiveUser()\n\n  //handle signout\n  const handleSignOut = async () => {\n    try {\n      await axios.post(\"dj-rest-auth/logout/\");\n      setActiveUser(null);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // Icons to display when logged in\n\n  const iconsLoggedIn = <>\n    <NavDropdown title=\"Tasks\" id=\"basic-nav-dropdown\">\n      <NavDropdown.Item href=\"/tasks\">View tasks</NavDropdown.Item>\n      <NavDropdown.Divider />\n      <NavDropdown.Item href=\"/task/create\">\n        Add task\n      </NavDropdown.Item>\n      \n    </NavDropdown>\n\n    <NavDropdown title=\"Projects\" id=\"basic-nav-dropdown\">\n      <NavDropdown.Item href=\"/projects\">View projects</NavDropdown.Item>\n      <NavDropdown.Divider />\n      <NavDropdown.Item href=\"/project/add\">\n        Add project\n      </NavDropdown.Item>\n     \n      \n    </NavDropdown>\n    <Navbar.Text>\n      Signed in as: \n    </Navbar.Text>\n    <NavDropdown title= {activeUser?.username} id=\"account-dropdown\">\n      <NavDropdown.Item href=\"/\" onClick={handleSignOut}>Sign out</NavDropdown.Item>\n      \n    </NavDropdown>\n    \n  </>\n\n  //Icons to display when logged out\n\n  const iconsLoggedOut = <>\n    <Navbar.Text>\n      <a href=\"/signin\">Sign In</a>\n    </Navbar.Text>\n    <Navbar.Text>\n      <a href=\"/register\">Sign Up</a>\n    </Navbar.Text>\n\n  </>\n\n  return (\n    <>\n      <Navbar className={styles.TopNavBar} fixed='top'>\n\n        <Container>\n          <Nav className=\"me-auto\">\n            <Navbar.Brand>\n              TASK PRO 1\n            </Navbar.Brand>\n          </Nav>\n          <Navbar.Toggle />\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Nav className='mr-auto'>\n              {activeUser ? iconsLoggedIn : iconsLoggedOut}\n            </Nav>\n\n          </Navbar.Collapse>\n        </Container>\n\n\n      </Navbar>\n    </>\n  );\n}\n\nexport default TopNavBar;","/workspace/taskpro_api/taskpro_ui/src/pages/auth/RegisterForm.js",[],"/workspace/taskpro_api/taskpro_ui/src/pages/tasks/TaskForm.js",["97","98","99","100","101","102","103","104","105"],"/workspace/taskpro_api/taskpro_ui/src/pages/tasks/Tasks.js",["106","107","108","109"],"import React from \"react\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"react-bootstrap/Container\";\n\nimport appStyles from \"../../App.module.css\";\nimport styles from \"../../styles/Tasks.module.css\";\n\nfunction Tasks() {\n  \n  return (\n    <Row className=\"h-100\">\n      <Col className=\"py-2 p-0 p-lg-2\" lg={8}>\n        <p>Tasks fpr mobile here</p>\n      \n      </Col>\n      <Col md={4} className=\"d-none d-lg-block p-0 p-lg-2\">\n        <p>Tasks for desktop</p>\n      </Col>\n    </Row>\n  );\n}\n\nexport default Tasks;","/workspace/taskpro_api/taskpro_ui/src/pages/auth/SignInForm.js",["110"],"import React, { useContext, useState } from \"react\";\nimport axios from \"axios\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Image from \"react-bootstrap/Image\";\nimport Container from \"react-bootstrap/Container\";\n\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport styles from \"../../styles/AuthForms.module.css\";\nimport btnStyles from \"../../styles/Button.module.css\";\nimport appStyles from \"../../App.module.css\";\nimport { useSetActiveUser } from \"../../contexts/ActiveUserContext\";\n\nfunction SignInForm() {\n\n  const setActiveUser = useSetActiveUser()\n\n  const [signInData, setSignInData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n  const { username, password } = signInData;\n\n  const [errors, setErrors] = useState({});\n\n  const history = useHistory();\n\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try { \n      const {data} = await axios.post(\"/dj-rest-auth/login/\", signInData);\n      //Set current user data to be accessed in the Nav bar to show the logged in user\n      setActiveUser(data.user)\n      history.push(\"/\");\n    } catch (err) {\n      setErrors(err.response?.data);\n    }\n  };\n\n  const handleChange = (event) => {\n    setSignInData({\n      ...signInData,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  return (\n    <Row className={styles.Row}>\n      <Col className=\"my-auto p-0 p-md-2\" md={6}>\n        <Container className={`${appStyles.Content} p-4 `}>\n          <h1 className={styles.Header}>sign in</h1>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"username\">\n              <Form.Label className=\"d-none\">Username</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Username\"\n                name=\"username\"\n                className={styles.Input}\n                value={username}\n                onChange={handleChange}\n              />\n            </Form.Group>\n            {errors.username?.map((message, idx) => (\n              <Alert key={idx} variant=\"warning\">\n                {message}\n              </Alert>\n            ))}\n\n            <Form.Group controlId=\"password\">\n              <Form.Label className=\"d-none\">Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Password\"\n                name=\"password\"\n                className={styles.Input}\n                value={password}\n                onChange={handleChange}\n              />\n            </Form.Group>\n            {errors.password?.map((message, idx) => (\n              <Alert key={idx} variant=\"warning\">\n                {message}\n              </Alert>\n            ))}\n            <Button\n              className={`${btnStyles.Button} ${btnStyles.Wide} ${btnStyles.Bright}`}\n              type=\"submit\"\n            >\n              Sign in\n            </Button>\n            {errors.non_field_errors?.map((message, idx) => (\n              <Alert key={idx} variant=\"warning\" className=\"mt-3\">\n                {message}\n              </Alert>\n            ))}\n          </Form>\n        </Container>\n        <Container className={`mt-3 ${appStyles.Content}`}>\n          <Link className={styles.Link} to=\"/register\">\n            Don't have an account? <span>Sign up now!</span>\n          </Link>\n        </Container>\n      </Col>\n      <Col\n        md={6}\n        className={`my-auto d-none d-md-block p-2 ${styles.SignInCol}`}\n      >\n        <Image\n          className={`${appStyles.FillerImage}`}\n          src={\"https://codeinstitute.s3.amazonaws.com/AdvancedReact/hero.jpg\"}\n        />\n      </Col>\n    </Row>\n  );\n}\n\nexport default SignInForm;","/workspace/taskpro_api/taskpro_ui/src/pages/tasks/TaskView.js",["111","112"],"import React, { useEffect, useState } from \"react\";\n\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"react-bootstrap/Container\";\n\nimport appStyles from \"../../App.module.css\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom/cjs/react-router-dom.min\";\nimport Task from \"./Task\";\n\nfunction TaskView() {\n  const { id } = useParams();\n  const [task, setTask] = useState({ results: [] });\n\n  useEffect(() => {\n    const handleMount = async () => {\n      try {\n        const [{ data: task }] = await Promise.all([\n          axios.get(`/tasks/${id}`),\n        ]);\n        setTask({ results: [task] });\n        console.log(task);\n      } catch (err) {\n        //just for testing\n        console.log(err);\n      }\n    };\n\n    handleMount();\n  }, [id]);\n\n  return (\n    <Row className=\"h-100\">\n      <Col className=\"py-2 p-0 p-lg-2\" lg={8}>\n        <Task {...task.results[0]} setTask={setTask} TaskView />\n        \n      </Col>\n      \n    </Row>\n  );\n}\n\nexport default TaskView;","/workspace/taskpro_api/taskpro_ui/src/pages/projects/ProjectForm.js",["113","114","115"],"/workspace/taskpro_api/taskpro_ui/src/pages/projects/Projects.js",["116","117","118","119"],"import React from \"react\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"react-bootstrap/Container\";\n\nimport appStyles from \"../../App.module.css\";\nimport styles from \"../../styles/Projects.module.css\";\n\nfunction Projects() {\n  \n  return (\n    <Row className=\"h-100\">\n      <Col className=\"py-2 p-0 p-lg-2\" lg={8}>\n        <p>Projects fpr mobile here</p>\n      \n      </Col>\n      <Col md={4} className=\"d-none d-lg-block p-0 p-lg-2\">\n        <p>Projects for desktop</p>\n      </Col>\n    </Row>\n  );\n}\n\nexport default Projects;","/workspace/taskpro_api/taskpro_ui/src/pages/projects/ProjectView.js",[],"/workspace/taskpro_api/taskpro_ui/src/pages/projects/Project.js",["120","121","122","123","124","125","126","127","128"],"import React from \"react\";\nimport styles from \"../../styles/TaskForm.module.css\";\nimport { Card, Media, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nconst Project = (props) => {\n    const {\n        id,\n        owner,\n        created_at,\n        updated_at,\n        project_name,\n        is_owner,\n    } = props;\n\n    return (\n        <Card className={styles.Project}>\n            <Card.Body>\n                {project_name && <Card.Title className=\"text-center\">{project_name}</Card.Title>}\n                \n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default Project;","/workspace/taskpro_api/taskpro_ui/src/pages/tasks/Task.js",["129","130","131","132","133","134","135","136","137","138"],"import React from \"react\";\nimport styles from \"../../styles/TaskForm.module.css\";\nimport { Card, Media, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport TaskView from \"./TaskView\";\n\nconst Task = (props) => {\n    const {\n        id,\n        owner,\n        created_at,\n        updated_at,\n        task_name,\n        description,\n        assignees,\n        project,\n        status,\n        attachment,\n        is_owner,\n    } = props;\n\n    return (\n        <Card className={styles.Post}>\n            \n            <Card.Body>\n                {task_name && <Card.Title className=\"text-center\">{task_name}</Card.Title>}\n                {description && <Card.Text>{description}</Card.Text>}\n                {assignees}<br></br>\n                {project}<br></br>\n                {status}<br></br>\n                {attachment}<br></br>\n                \n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default Task;","/workspace/taskpro_api/taskpro_ui/src/hooks/useRegisteredUsers.js",["139"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useRegisteredUsers = () => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true); // Add loading state\n\n  useEffect(() => {\n    axios.get('/profiles/')\n      .then(response => {\n        setData(response.data);\n        setLoading(false); // Set loading to false after data is fetched\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n        setLoading(false); // Set loading to false in case of error\n      });\n  }, []); // ensures effect runs only once after initial render\n\n  return { data, loading }; // Return data and loading state\n}\n\nexport default useRegisteredUsers;\n","/workspace/taskpro_api/taskpro_ui/src/hooks/useProjects.js",[],"/workspace/taskpro_api/taskpro_ui/src/pages/tasks/TasksPage.js",["140","141","142"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Task from './Task';\nimport TaskView from './TaskView';\nimport { Button, Card, Form, Modal } from \"react-bootstrap\";\nimport { useHistory } from 'react-router-dom';\n\n\nfunction TasksPage() {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [editedTask, setEditedTask] = useState({\n    id: '',\n    task_name: '',\n    description: '',\n    owner: '',\n    created_at: '',\n    status: ''\n  });\n\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const response = await axios.get(`/tasks?filter=${filter}`);\n        setTasks(response.data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching tasks:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchTasks();\n  }, [filter]);\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value);\n  };\n\n  const handleDeleteClick = async (taskId) => {\n    try {\n      await axios.delete(`/tasks/${taskId}`);\n      alert(\"Task successfully deleted\")\n      // Refresh the page after deletion\n      window.location.reload();\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      alert(\"You cannot delete another user's tasks\")\n\n    }\n  };\n\n  //Edit functionality\n  const handleEditClick = (task) => {\n    setEditedTask(task);\n    setShowEditModal(true);\n  };\n\n  const handleEditModalClose = () => {\n    setShowEditModal(false);\n  };\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setEditedTask(prevTask => ({\n      ...prevTask,\n      [name]: value\n    }));\n  };\n\n  const handleEditSubmit = async () => {\n    try {\n      await axios.put(`/tasks/${editedTask.id}/`, editedTask);\n      setShowEditModal(false);\n      // Refresh the page and alert\n      alert(\"Task successfully updated\")\n      // Refresh the page after deletion\n      window.location.reload();\n    } catch (error) {\n      console.error('Error editing task:', error);\n      alert(\"You may not have rights to edit this task\")\n\n    }\n  };\n\n  return (\n    <div>\n      <h1>Tasks list</h1>\n      <input\n        type=\"text\"\n        placeholder=\"Search...\"\n        value={filter}\n        onChange={handleFilterChange}\n      />\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <ul>\n          {tasks.map((task) => (\n            <>\n              <Card>\n                <Card.Body>\n                  <Card.Title className=\"text-center\">{task.task_name}</Card.Title>\n                  <Card.Text>{task.description}</Card.Text>\n                  Owner: {task.owner}<br></br>\n                  Date created: {task.created_at}<br></br>\n                  Status: {task.status}<br></br>\n                </Card.Body>\n                <Button onClick={() => handleEditClick(task)}>Edit</Button>\n                <br></br>\n                <Button variant=\"danger\" onClick={() => handleDeleteClick(task.id)}>Delete</Button>\n                \n                \n\n\n              </Card>\n            </>\n          ))}\n        </ul>\n      )}\n\n      {/* Use an model object for the edit function */}\n      <Modal show={showEditModal} onHide={handleEditModalClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Task</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Group controlId=\"formTaskName\">\n              <Form.Label>Task Name</Form.Label>\n              <Form.Control type=\"text\" name=\"task_name\" value={editedTask.task_name} onChange={handleInputChange} />\n            </Form.Group>\n            <Form.Group controlId=\"formDescription\">\n              <Form.Label>Description</Form.Label>\n              <Form.Control as=\"textarea\" name=\"description\" value={editedTask.description} onChange={handleInputChange} />\n            </Form.Group>\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleEditModalClose}>Cancel</Button>\n          <Button variant=\"primary\" onClick={handleEditSubmit}>Confirm</Button>\n        </Modal.Footer>\n      </Modal>\n\n    </div>\n  );\n}\n\nexport default TasksPage;\n","/workspace/taskpro_api/taskpro_ui/src/pages/projects/ProjectsPage.js",[],{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":13,"column":8,"nodeType":"149","messageId":"150","endLine":13,"endColumn":13},{"ruleId":"147","severity":1,"message":"151","line":14,"column":8,"nodeType":"149","messageId":"150","endLine":14,"endColumn":16},{"ruleId":"147","severity":1,"message":"152","line":1,"column":26,"nodeType":"149","messageId":"150","endLine":1,"endColumn":33},{"ruleId":"147","severity":1,"message":"153","line":21,"column":12,"nodeType":"149","messageId":"150","endLine":21,"endColumn":18},{"ruleId":"147","severity":1,"message":"154","line":25,"column":19,"nodeType":"149","messageId":"150","endLine":25,"endColumn":26},{"ruleId":"147","severity":1,"message":"155","line":33,"column":11,"nodeType":"149","messageId":"150","endLine":33,"endColumn":29},{"ruleId":"147","severity":1,"message":"156","line":40,"column":11,"nodeType":"149","messageId":"150","endLine":40,"endColumn":29},{"ruleId":"147","severity":1,"message":"157","line":45,"column":11,"nodeType":"149","messageId":"150","endLine":45,"endColumn":36},{"ruleId":"147","severity":1,"message":"158","line":58,"column":37,"nodeType":"149","messageId":"150","endLine":58,"endColumn":46},{"ruleId":"147","severity":1,"message":"159","line":58,"column":57,"nodeType":"149","messageId":"150","endLine":58,"endColumn":63},{"ruleId":"147","severity":1,"message":"160","line":58,"column":65,"nodeType":"149","messageId":"150","endLine":58,"endColumn":75},{"ruleId":"147","severity":1,"message":"161","line":80,"column":21,"nodeType":"149","messageId":"150","endLine":80,"endColumn":25},{"ruleId":"147","severity":1,"message":"162","line":3,"column":8,"nodeType":"149","messageId":"150","endLine":3,"endColumn":12},{"ruleId":"147","severity":1,"message":"163","line":6,"column":8,"nodeType":"149","messageId":"150","endLine":6,"endColumn":17},{"ruleId":"147","severity":1,"message":"164","line":8,"column":8,"nodeType":"149","messageId":"150","endLine":8,"endColumn":17},{"ruleId":"147","severity":1,"message":"165","line":9,"column":8,"nodeType":"149","messageId":"150","endLine":9,"endColumn":14},{"ruleId":"147","severity":1,"message":"166","line":1,"column":17,"nodeType":"149","messageId":"150","endLine":1,"endColumn":27},{"ruleId":"147","severity":1,"message":"163","line":5,"column":8,"nodeType":"149","messageId":"150","endLine":5,"endColumn":17},{"ruleId":"147","severity":1,"message":"164","line":7,"column":8,"nodeType":"149","messageId":"150","endLine":7,"endColumn":17},{"ruleId":"147","severity":1,"message":"167","line":9,"column":8,"nodeType":"149","messageId":"150","endLine":9,"endColumn":14},{"ruleId":"147","severity":1,"message":"153","line":20,"column":12,"nodeType":"149","messageId":"150","endLine":20,"endColumn":18},{"ruleId":"147","severity":1,"message":"161","line":44,"column":21,"nodeType":"149","messageId":"150","endLine":44,"endColumn":25},{"ruleId":"147","severity":1,"message":"162","line":3,"column":8,"nodeType":"149","messageId":"150","endLine":3,"endColumn":12},{"ruleId":"147","severity":1,"message":"163","line":6,"column":8,"nodeType":"149","messageId":"150","endLine":6,"endColumn":17},{"ruleId":"147","severity":1,"message":"164","line":8,"column":8,"nodeType":"149","messageId":"150","endLine":8,"endColumn":17},{"ruleId":"147","severity":1,"message":"165","line":9,"column":8,"nodeType":"149","messageId":"150","endLine":9,"endColumn":14},{"ruleId":"147","severity":1,"message":"168","line":3,"column":16,"nodeType":"149","messageId":"150","endLine":3,"endColumn":21},{"ruleId":"147","severity":1,"message":"169","line":3,"column":23,"nodeType":"149","messageId":"150","endLine":3,"endColumn":37},{"ruleId":"147","severity":1,"message":"170","line":3,"column":39,"nodeType":"149","messageId":"150","endLine":3,"endColumn":46},{"ruleId":"147","severity":1,"message":"171","line":4,"column":10,"nodeType":"149","messageId":"150","endLine":4,"endColumn":14},{"ruleId":"147","severity":1,"message":"172","line":8,"column":9,"nodeType":"149","messageId":"150","endLine":8,"endColumn":11},{"ruleId":"147","severity":1,"message":"173","line":9,"column":9,"nodeType":"149","messageId":"150","endLine":9,"endColumn":14},{"ruleId":"147","severity":1,"message":"174","line":10,"column":9,"nodeType":"149","messageId":"150","endLine":10,"endColumn":19},{"ruleId":"147","severity":1,"message":"175","line":11,"column":9,"nodeType":"149","messageId":"150","endLine":11,"endColumn":19},{"ruleId":"147","severity":1,"message":"176","line":13,"column":9,"nodeType":"149","messageId":"150","endLine":13,"endColumn":17},{"ruleId":"147","severity":1,"message":"168","line":3,"column":16,"nodeType":"149","messageId":"150","endLine":3,"endColumn":21},{"ruleId":"147","severity":1,"message":"169","line":3,"column":23,"nodeType":"149","messageId":"150","endLine":3,"endColumn":37},{"ruleId":"147","severity":1,"message":"170","line":3,"column":39,"nodeType":"149","messageId":"150","endLine":3,"endColumn":46},{"ruleId":"147","severity":1,"message":"171","line":4,"column":10,"nodeType":"149","messageId":"150","endLine":4,"endColumn":14},{"ruleId":"147","severity":1,"message":"177","line":5,"column":8,"nodeType":"149","messageId":"150","endLine":5,"endColumn":16},{"ruleId":"147","severity":1,"message":"172","line":9,"column":9,"nodeType":"149","messageId":"150","endLine":9,"endColumn":11},{"ruleId":"147","severity":1,"message":"173","line":10,"column":9,"nodeType":"149","messageId":"150","endLine":10,"endColumn":14},{"ruleId":"147","severity":1,"message":"174","line":11,"column":9,"nodeType":"149","messageId":"150","endLine":11,"endColumn":19},{"ruleId":"147","severity":1,"message":"175","line":12,"column":9,"nodeType":"149","messageId":"150","endLine":12,"endColumn":19},{"ruleId":"147","severity":1,"message":"176","line":19,"column":9,"nodeType":"149","messageId":"150","endLine":19,"endColumn":17},{"ruleId":"147","severity":1,"message":"178","line":1,"column":8,"nodeType":"149","messageId":"150","endLine":1,"endColumn":13},{"ruleId":"147","severity":1,"message":"179","line":3,"column":8,"nodeType":"149","messageId":"150","endLine":3,"endColumn":12},{"ruleId":"147","severity":1,"message":"177","line":4,"column":8,"nodeType":"149","messageId":"150","endLine":4,"endColumn":16},{"ruleId":"147","severity":1,"message":"180","line":6,"column":10,"nodeType":"149","messageId":"150","endLine":6,"endColumn":20},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"no-unused-vars","'Tasks' is defined but never used.","Identifier","unusedVar","'Projects' is defined but never used.","'NavLink' is defined but never used.","'errors' is assigned a value but never used.","'loading' is assigned a value but never used.","'handleSelectChange' is assigned a value but never used.","'handleSelectStatus' is assigned a value but never used.","'handleProjectSelectChange' is assigned a value but never used.","'assignees' is assigned a value but never used.","'status' is assigned a value but never used.","'attachment' is assigned a value but never used.","'data' is assigned a value but never used.","'Form' is defined but never used.","'Container' is defined but never used.","'appStyles' is defined but never used.","'styles' is defined but never used.","'useContext' is defined but never used.","'Upload' is defined but never used.","'Media' is defined but never used.","'OverlayTrigger' is defined but never used.","'Tooltip' is defined but never used.","'Link' is defined but never used.","'id' is assigned a value but never used.","'owner' is assigned a value but never used.","'created_at' is assigned a value but never used.","'updated_at' is assigned a value but never used.","'is_owner' is assigned a value but never used.","'TaskView' is defined but never used.","'React' is defined but never used.","'Task' is defined but never used.","'useHistory' is defined but never used.","no-global-assign","no-unsafe-negation"]